      * ---------------------------------------------------------------------- *
      * This is the prototype for BlueSeries/IceBreak - JSON and XML parser
      * Use the JSONXML binddir when creating your program and include this
      * prototypes like:
      *
      *  H BNDDIR('JSONPARSER')
      *  /include jsonParser
      *
      *  Or
      *
      *  H BNDDIR('XMLPARSER')
      *  /include xmlParser
      *
      *  Note: Both XMLPARSER and JSONPARSER headers are autogenerated from
      *  the JSONXML header. so please do not make any changes th there headerfiles
      *
      *  Note: all binddirectories JSONPARSER, XMLPARSER and JSONXML is the same
      * ---------------------------------------------------------------------- *
      /if defined( json_DEF)
      /eof
      /endif
      /define  json_DEF
      * ---------------------------------------------------------------------- *
      * Before starting that parser - to enshure right enterpretations of delimiters.
      * Usage:
      * json_setDelimiters( json_DELIMITERS);
      *  --------------------------------------------------------------------- *
     d json_getDelimiters...
     d                 pr              *   extproc(*CWIDEN :'jx_GetDelimiters') get delimiter pointer
     d json_setDelimiters...
     d                 pr                  extproc(*CWIDEN :'jx_SetDelimiters2')Set delimiter used for locate expression
I    d   delimiterStr                  *   value options(*string)               always: '/\@[] .{}' in your  local CCSID
     d     json_DELIMITERS...
     d                 c                   const('/\@[] .{}''"')
      * ---------------------------------------------------------------------- *
      * Type of a node:
      * ---------------------------------------------------------------------- *
     d     json_UNKNOWN...
     d                 c                   const(0)
     d     json_OBJECT...
     d                 c                   const(1)
     d     json_ARRAY...
     d                 c                   const(2)
     d     json_EVAL...
     d                 c                   const(3)
     d     json_POINTER_VALUE...
     d                 c                   const(4)
     d     json_VALUE...
     d                 c                   const(5)
     d     json_ROOT...
     d                 c                   const(6)
     d     json_LITERAL...
     d                 c                   const(16)
     d     json_OBJLINK...
     d                 c                   const(17)
     d     json_OBJREPLACE...
     d                 c                   const(18)
     d     json_OBJCOPY...
     d                 c                   const(18)
     d     json_BY_CONTEXT...
     d                 c                   const(19)
     d     json_OBJMOVE...
     d                 c                   const(2048)
     d** Modifiers to "add" / "or" into "parseString" and "evaluate"
     d     json_MOVE_MODES...                                                     !! Type - have to be backwards compat.
     d                 c                   const(2048)                          Unlink the source and move it to dest.
     d     json_MOVE_NODES...
     d                 c                   const(2048)                          Unlink the source and move it to dest.
     d     json_ALLOW_PRIMITIVES...
     d                 c                   const(4096 )                         Allow strings ints and other values to
     d** Combinations:
     d*    json_PARSE  = json_EVAL + json_MOVE_NODES
     d     json_PARSE...
     d                 c                   const(2051)
     d* Merge options:                                                          evaluate with PARSE_STRING
     d*  Modifiers to "add" / "or" into "JSON_EVAL"
      /if not defined(MO_MERGE)
      /define  MO_MERGE
     d     MO_MERGE_NEW...                                                      Only new elements are merged - existing
     d                 c                   const(256)                           are left untouched
     d     MO_MERGE_MATCH...                                                    Merge and replace only existing nodes.
     d                 c                   const(512)
     d     MO_MERGE_REPLACE...                                                  Merge all: replace if it exists and
     d                 c                   const(1024 )                         append new nodes if not exists
      /endif
     d     json_CHILD_LIST...
     d                 c                   const('[0]')

      * ---------------------------------------------------------------------- *
I    d json_ParseFile...
I    d                 pr              *   extproc(*CWIDEN:'jx_ParseFile')      Returns node to the json_object tree
I    d FileName                        *   value options(*string)               File to parse
I    d Options                         *   value options(*string:*nopass)       Parsing options

I    d json_ParseString...
I    d                 pr              *   extproc(*CWIDEN:'jx_ParseString')    Returns node json_object tree
I    d String                          *   value options(*string)               String to parse
I    d Options                         *   value options(*string:*nopass)       Parsing options

     d json_setDecPoint...
     d                 pr                  extproc(*CWIDEN : 'jx_SetDecPoint')  Set , or . for numeri decimal point
     d   decPoint                      *   value options(*string)               decimal point char



I    d json_Error...
I    d                 pr              N   extproc(*CWIDEN:'jx_Error')          Bool true if errors occures
I    d pNode                           *   value                                json_Object  node

I    d json_Message...
I    d                 pr          1024    extproc(*CWIDEN:'jx_Message')        Return error description
I    d                                     varying                              String to parse
I    d pNode                           *   value                                json_Object

I    d json_Locate...
I    d                 pr              *   extproc(*CWIDEN : 'jx_GetNode')      Returns pointer to node
I    d   pNode                         *   value                                Pointer to tree or node
I    d   Expression                    *   value options(*string)               location expression

I    d json_LocateOrCreate...
I    d                 pr              *   extproc(*CWIDEN :                    Returns pointer to node
     d                                     'jx_GetOrCreateNode')
I    d   pNode                         *   value                                Pointer to tree or node
I    d   Expression                    *   value options(*string)               location expression

I    d json_Has...
I    d                 pr              N   extproc(*CWIDEN : 'jx_Has')          Returns 'ON' if node exists
I    d   pNode                         *   value                                Pointer to tree or node
I    d   NodeName                      *   value options(*string)               Path to node

I    d json_isTrue...
I    d                 pr              N   extproc(*CWIDEN : 'jx_IsTrue')       Returns 'ON' if node exists and has <> 0
I    d   pNode                         *   value                                Pointer to tree or node
I    d   NodeName                      *   value options(*string)               Path to node

I    d json_isNull...
I    d                 pr              N   extproc(*CWIDEN : 'jx_IsNull')       Returns 'ON' if node exists and has <> 0
I    d   pNode                         *   value                                Pointer to tree or node
I    d   NodeName                      *   value options(*string)               Path to node

I    d json_isNode...
I    d                 pr              N   extproc(*CWIDEN : 'jx_isNode')       Returns 'ON' if it is a valid node
I    d   pNode                         *   value                                a.k.a. false for strings

I    d json_NodeRename...
I    d                 pr              N   extproc(*CWIDEN : 'jx_NodeRename')   renames the node name
I    d   pNode                         *   value                                Pointer to tree or node
I    d   NodeName                      *   value options(*string)               Path to node

I    d json_GetNext...
I    d                 pr              *   extproc(*CWIDEN : 'jx_GetNodeNext')  Returns pointer to next sibling (elem)
I    d   pNode                         *   value                                Pointer to current node (elem)

I    d json_GetChild...
I    d                 pr              *   extproc(*CWIDEN : 'jx_GetNodeChild') Returns pointer to first child (elem)
I    d   pNode                         *   value                                Pointer to current node (elem)

I    d json_GetParent...
I    d                 pr              *   extproc(*CWIDEN :                    Returns pointer to parent node
I    d                                     'jx_GetNodeParent')
I    d   pNode                         *   value                                Pointer to current node (elem)

     d json_SetStr...
     d                 pr              *
     d                                     extproc(*CWIDEN:                     Returns node where value was set
     d                                     'jx_SetStrByName')
     d   pNode                         *   value                                Pointer to json_ tree
     d   Expresion                     *   value options(*string)               X-path locations to node or attributes
     d   Value                         *   value options(*string)               New value to set / pointer to object

     d json_SetInt...
     d                 pr              *
     d                                     extproc(*CWIDEN:                     Returns node where value was set
     d                                     'jx_SetIntByName')
     d   pNode                         *   value                                Pointer to json_ tree
     d   Expresion                     *   value options(*string)               X-path locations to node or attributes
     d   Value                       10i 0 value                                New value to set / pointer to object

     d json_SetNum...
     d                 pr              *
     d                                     extproc(*CWIDEN:                     Returns node where value was set
     d                                     'jx_SetDecByName')
     d   pNode                         *   value                                Pointer to json_ tree
     d   Expresion                     *   value options(*string)               X-path locations to node or attributes
     d   Value                       30p15 value                                New value to set / pointer to object

     d json_SetBool...
     d                 pr              *
     d                                     extproc(*CWIDEN:                     Returns node where value was set
     d                                     'jx_SetBoolByName')
     d   pNode                         *   value                                Pointer to json_ tree
     d   Expresion                     *   value options(*string)               X-path locations to node or attributes
     d   Value                         n   value                                New value to set / pointer to object

     d json_SetPtr...
     d                 pr              *
     d                                     extproc(*CWIDEN:                     Returns node where value was set
     d                                     'jx_SetPtrByName')
     d   pNode                         *   value                                Pointer to json_ tree
     d   Expresion                     *   value options(*string)               X-path locations to node or attributes
     d   Value                         *   value                                Pointer to anything - You do the cleanup

     d json_SetValue...
     d                 pr              *
     d                                     extproc(*CWIDEN:                     Returns node where value was set
     d                                     'jx_SetValueByName')
     d   pNode                         *   value                                Pointer to json_ tree
     d   Expresion                     *   value options(*string)               X-path locations to node or attributes
     d   Value                         *   value options(*string:*nopass)       New value to set / pointer to object
     d   Type                         5u 0 value options(*nopass)               Optional new type (Refer "node type"

I    d json_GetValueStr...
I    d                 pr         32767    varying
I    d                                     extproc(*CWIDEN :                    Returns node value
I    d                                     'jx_GetNodeValueVC')
I    d   pNode                         *   value                                Pointer to node
I    d   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

I    d json_GetValueNum...
I    d                 pr            30p15
I    d                                     extproc(*CWIDEN :                    Returns node value
I    d                                     'jx_GetNodeValueNum')
I    d   pNode                         *   value                                Pointer to node
I    d   Defaultvalue                30p15 value options(*NOPASS)               If not found - default value

I    d json_GetValuePtr...
I    d                 pr              *
I    d                                     extproc(*CWIDEN :                    Returns pointer to node value
I    d                                     'jx_GetNodeValuePtr')
I    d   pNode                         *   value                                Pointer to node
I    D   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

I    d json_GetName...
I    d                 pr         32767    varying
I    d                                     extproc(*CWIDEN :
I    d                                     'jx_GetNodeNameVC')                  Returns node Name
I    d   pNode                         *   value                                Pointer to node

I    d json_GetNameAsPath...
I    d                 pr         32767    varying
I    d                                     extproc(*CWIDEN :
I    d                                     'jx_GetNodeNameAsPath')              Returns node Name
I    d   pNode                         *   value                                Pointer to node
I    d   Delimiter                    1    value                                Delimiter like - or . or / or \

      ** Refer to node type above
     d json_NodeType...
I    d                 pr             5I 0
I    d                                     extproc(*CWIDEN :
     d                                     'jx_GetNodeType')
I    d   pNode                         *   value                                Pointer to json_ tree to receive format

      // Get string by expresion
      //  /object/array[123]/name
      //  .object.array[123].name
     d json_GetStr...
     d                 pr         32767    varying
     d                                     extproc(*CWIDEN : 'jx_GetValueVC')   Returns node or attribute value
     d   pNode                         *   value                                Pointer to relative node
     d   Expression                    *   value options(*string:*nopass)       Locations expression to node
     d   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

      //  will join all subsequent array nodes into one resulting string
     d json_GetStrJoin...
     d                 pr         32767    varying
     d                                     extproc(*CWIDEN : 'jx_GetStrJoinVC') Returns node or attribute value
     d   pNode                         *   value                                Pointer to relative node
     d   Expression                    *   value options(*string:*nopass)       Locations expression to node
     d   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

      // Get number by expresion like:
      //  /object/array[123]/name
      //  .object.array[123].name
     d json_GetNum...
     d                 pr            30p15
     d                                     extproc(*CWIDEN : 'jx_GetValueNum')  Returns node or attribute using Xpath
     d   pNode                         *   value                                Pointer to relative node
     d   Expression                    *   value options(*string:*nopass)       Locations expression to node
     d   Defaultvalue                30p15 value options(*nopass)               If not found - default value

I    d json_GetIlobValue...                                                       Set an ILOB object to a value found by
I    d                 pr              N   extproc(*CWIDEN :'ILOB_XmlGetValue') Return *ON if found
I    d   pIlob                         *   value                                Pointer to ILOB object to receive the va
I    d   pNode                         *   value                                Pointer to tree
I    d   Expression                    *   value options(*string)               X-path locations to node or attributes

     d json_NodeCopy...
     d                 pr
     d                                     extproc(*CWIDEN :                    Appends a child node from anoth. tree
     d                                     'jx_NodeCopy')
     d   pRootNode                     *   value                                node. Retrive from Locate()
     d   pNewChild                     *   value                                node. Retrive from Locate()
     d   RefLocation                 10I 0 value                                Reference location to where it arrive
     d     json_FIRST_CHILD...
     d                 c                   const(1)
     d     json_LAST_CHILD...
     d                 c                   const(2)
     d     json_BEFORE_SIBLING...
     d                 c                   const(3)
     d     json_AFTER_SIBLING...
     d                 c                   const(4)
     d json_NodeClone...
     d                 pr              *
     d                                     extproc(*CWIDEN :                    pointer to new copy af source node
     d                                     'jx_NodeClone')
     d   pSource                       *   value                                node. Retrive from Locate()

     d json_NodeAdd...
     d                 pr              *                                        returns the new node
     d                                     extproc(*CWIDEN :                    Appends a child node from anoth. tree
     d                                     'jx_NodeAdd')
     d   pRootNode                     *   value                                node. Retrive from Locate()
     d   RefLocation                 10I 0 value                                Reference location to where it arrive
I    d   Name                          *   value options(*string)               Name of node
I    d   Value                         *   value options(*string)               Value or expression
     d   Type                         5u 0 value                                New type (Refer "node type"

     d json_NodeDelete...
     d                 pr
     d                                     extproc(*CWIDEN :                    Appends a child node from anoth. tree
     d                                     'jx_NodeDelete')
     d   pRootNode                     *   value                                node. Retrive from Locate()

     d json_NodeSanitize...
     d                 pr
     d                                     extproc(*CWIDEN :                    Delete all nodes which value are null
     d                                     'jx_NodeSanitize')
     d   pRootNode                     *   value                                node. Retrive from Locate()

     d json_NewObject...
     d                 pr              *                                        returns the new node
     d                                     extproc(*CWIDEN :                    Appends a child node from anoth. tree
     d                                     'jx_NewObject')
     d   pDestNode                     *   value options(*nopass)               Destination. Retrive from Locate()

      // Array functions
     d json_NewArray...
     d                 pr              *                                        returns the new node
     d                                     extproc(*CWIDEN :                    Appends a child node from anoth. tree
     d                                     'jx_NewArray')
     d   pDestNode                     *   value options(*nopass)               Destination. Retrive from Locate()

     d json_ArrayPush...
     d                 pr              *                                        returns the new node added to the end of
     d                                     extproc(*CWIDEN :                    the array
     d                                     'jx_ArrayPush')
     d   pDestArray                    *   value                                Destination. Retrive from Locate()
     d   pSourceNode                   *   value options(*string)               source node to append
     d   copy                         5u 0 value options(*nopass)               0=(Dft) Unlink and move, 1=copy a clone
     d     json_MOVE_UNLINK...
     d                 c                   const(0)
     d     json_COPY_CLONE...
     d                 c                   const(1)

     d json_ArraySort...
     d                 pr              *                                        returns the new node added to the end of
     d                                     extproc(*CWIDEN :                    the array
     d                                     'jx_ArraySort')
     d   pArray                        *   value                                Destination. Retrive from Locate()
     d   pkeyNames                     *   value options(*string)               nodenames if any in subobject to comapre
     d                                                                          separated by commas
     d json_LookupValue...
     d                 pr              *                                        returns the first node with expr value
     d                                     extproc(*CWIDEN :                      of the array or object
     d                                     'jx_lookupValue')
     d   pArray                        *   value                                Array/ obj to search
     d   expr                          *   value options(*string)               What to search for
     d   ignoreCase                   5u 0 value options(*nopass)               0=(Dft) Same case, 1=ignore case
     d     json_SAME_CASE...
     d                 c                   const(0)
     d     json_IGNORE_CASE...
     d                 c                   const(1)
     d json_GetLength...
     d                 pr            10i 0                                      returns numer of element in array or obj
     d                                     extproc(*CWIDEN :                    or -1 if error / not an array or object
     d                                     'jx_getLength'  )
     d   pArray                        *   value                                Array to count length

     d json_Merge...
     d                 pr              *                                        returns the new node
     d                                     extproc(*CWIDEN :                    Appends a child node from anoth. tree
     d                                     'jx_NodeMerge')
     d   pDestNode                     *   value                                Destination. Retrive from Locate()
     d   pSourceNode                   *   value                                Source tree  Retrive from Locate()
     d   Type                         5u 0 value options(*nopass)               Optional new type
     d     json_DONTREPLACE...
     d                 c                   const(0)
     d     json_REPLACE...
     d                 c                   const(1)

     d json_MergeObjects...
     d                 pr              *                                        returns the new node
     d                                     extproc(*CWIDEN :                    Appends a child node from anoth. tree
     d                                     'jx_MergeObjects')
     d   pDestObj                      *   value                                Destination. Retrive from Locate()
     d   pSourceObj                    *   value                                Source tree  Retrive from Locate()
     d   Type                         5u 0 value                                Optional new type
     d*    json_DONTREPLACE...
     d*                c                   const(0)
     d*    json_REPLACE...
     d*                c                   const(1)
     d json_MoveObjectInto...
     d                 pr              *                                        returns the source node
     d                                     extproc(*CWIDEN :                    Appends or replace the node
     d                                     'jx_NodeMoveInto')                   Source object is not modified
     d   pDestObj                      *   value                                Destination. Retrive from Locate()
     d   Name                          *   value options(*string)
     d   pSourceObj                    *   value                                Source tree  Retrive from Locate()

I    d json_Dump...
I    d                 pr                  extproc(*CWIDEN : 'jx_Dump')
I    d   pNode                         *   value                                Pointer to tree


     d json_CloneFormat...
I    d                 pr                  extproc(*CWIDEN :
     d                                     'jx_CloneFormat')
I    d   pNode                         *   value                                Pointer to tree to receive format
I    d   pCloneFrom                    *   value options(*string)               node ptr or path with right formating

      ***  JSON renderes ***
I    d json_WriteJsonStmf...
I    d                 pr                  extproc(*CWIDEN :
I    d                                     'jx_WriteJsonStmf')
I    d   pNode                         *   value                                node. Retrive from Locate()
I    d   FileName                      *   value options(*string)               Name of output stream file
I    d   Ccsid                       10I 0 value                                Ccsid of output file
     d   Trim                          N   value
I    d   Options                       *   value options(*string:*nopass)       Extra options

     d json_AsJsonText...
     d                 pr         32767    varying
     d                                     extproc(*CWIDEN :
     d                                     'jx_AsJsonText')
     d   pNode                         *   value                                node. Retrive from Locate()

     d json_AsJsonTextMem...
     d                 pr            10u 0
     d                                     extproc(*CWIDEN :
     d                                     'jx_AsJsonTextMem')
     d   pNode                         *   value                                node. Retrive from Locate()
     d   pBuffer                       *   value                                pointer to any memory buffer

      ***  XML  renderes ***
I    d json_WriteXmlStmf...
I    d                 pr                  extproc(*CWIDEN :
I    d                                     'jx_WriteXmlStmf')
I    d   pNode                         *   value                                node. Retrive from Locate()
I    d   FileName                      *   value options(*string)               Name of output stream file
I    d   Ccsid                       10I 0 value                                Ccsid of output file
     d   Trim                          N   value
I    d   Options                       *   value options(*string:*nopass)       Extra options

     d json_AsXmlText...
     d                 pr         32767    varying
     d                                     extproc(*CWIDEN :
     d                                     'jx_AsXmlText')
     d   pNode                         *   value                                node. Retrive from Locate()

     d json_AsXmlTextMem...
     d                 pr            10u 0
     d                                     extproc(*CWIDEN :
     d                                     'jx_AsXmlTextMem')
     d   pNode                         *   value                                node. Retrive from Locate()
     d   pBuffer                       *   value                                pointer to any memory buffer

      ***  CSV  renderes ***
I    d json_WriteCsvStmf...
I    d                 pr                  extproc(*CWIDEN :
I    d                                     'jx_WriteCsvStmf')
I    d   pNode                         *   value                                node. Retrive from Locate()
I    d   FileName                      *   value options(*string)               Name of output stream file
I    d   Ccsid                       10I 0 value                                Ccsid of output file
     d   Trim                          N   value                                *ON=Remove inter blanks
I    d   Options                       *   value options(*string:*nopass)       Options: ';.' for separator and dec


     d json_DelimiterDS...
     d                 ds                  based(prototype_only) qualified
     d   Slash                        1
     d   BackSlash                    1
     d   Masterspace                  1
     d   BraBeg                       1
     d   BraEnd                       1
     d   Blank                        1
     d   Dot                          1
     d   CurBeg                       1
     d   CurEnd                       1
     d   Apos                         1
     d   Quot                         1

     d* Iterators: First use the set the use forEach
     d json_Iterator...
     d                 ds                  based(prototype_only) qualified
     d   root                          *
     d   this                          *
     d   isList                        N
     d   isFirst                       N
     d   isLast                        N
     d   isRecursive                   N
     d   comma                        1    varying
     d   count                       10i 0
     d   length                      10i 0
     d   size                        10i 0
     d   listArr                       *                                        Pointer to temp array of elms
     d   break                         N                                        Set  this to *ON to teminate loop
     d   filler                      64

     d json_setIterator...
     d                 pr                  likeds( json_Iterator)
     d                                     extproc(*CWIDEN : 'jx_SetIterator')
     d   pNode                         *   value                                node. Retrive from Locate()
     d   path                          *   value options(*string:*nopass)       Optional - path to node

     d json_setRecursiveIterator...
     d                 pr                  likeds( json_Iterator)
     d                                     extproc(*CWIDEN :
     d                                     'jx_SetRecursiveIterator')
     d   pNode                         *   value                                node. Retrive from Locate()
     d   path                          *   value options(*string:*nopass)       Optional - path to node

     d json_forEach...
     d                 pr              N                                        Iterator Structure
     d                                     extproc(*CWIDEN : 'jx_ForEach')
     d   iterator                          likeds( json_Iterator)

     d* For XML attributes
I    d json_GetNodeAttrValue...
I    d                 pr         32767    varying
I    d                                     extproc(*CWIDEN :
I    d                                     'jx_GetNodeAttrValueVC')             Returns Attribute value
     d   pNode                         *   value                                Pointer to exsiting element
I    d   AttrName                      *   value options(*string)               Attribute Name
I    d   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

     d json_SetNodeAttrValue...
     d                 pr
     d                                     extproc(*CWIDEN :                    Update or add and aattribute
     d                                     'jx_SetNodeAttrValue')
     d   pNode                         *   value                                Pointer to exsiting element
     d   AttrName                      *   value options(*string)               Attribute name
     d   Value                         *   value options(*string)               New value

I    d json_GetAttrValue...
I    d                 pr         32767    varying
I    d                                     extproc(*CWIDEN :
I    d                                     'jx_GetAttrValueVC')                 Returns Attribute value
I    d   pAttr                         *   value                                Pointer Attribute
I    d   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

     d json_SetAttrValue...
     d                 pr
     d                                     extproc(*CWIDEN :                    Update or add and aattribute
     d                                     'jx_SetAttrValue')
I    d   pAttr                         *   value                                Pointer Attribute
     d   Value                         *   value options(*string)               New value

I    d json_GetAttrFirst...
I    d                 pr              *   extproc(*CWIDEN : 'jx_GetAttrFirst') Returns pointer to attribute list
I    d   pElem                         *   value                                Pointer to element

I    d json_GetAttrNext...
I    d                 pr              *   extproc(*CWIDEN : 'jx_GetAttrNext')  Returns pointer to attribute list
I    d   pAttr                         *   value                                Pointer to attribute list

I    d json_GetAttrName...
     d                 pr         32767    varying
I    d                                     extproc(*CWIDEN : 'jx_GetAttrNameVC')Returns attribute name
I    d   pAttr                         *   value                                Pointer to attribute list

      // Close all nodes in this tree - also parent and siblings
I    d json_Close...
I    d                 pr                  extproc(*CWIDEN : 'jx_Close')
I    d   pNode                         *                                        Pointer to tree node
     d
     d
      // Detect if you have a memry leak: call this when you have closed everything at i will return false
I    d json_MemLeak...
I    d                 pr              N   extproc(*CWIDEN : 'jx_MemLeak')

      // Print memory report
I    d json_MemStat...
I    d                 pr                  extproc(*CWIDEN : 'jx_MemStat')

      // Return a memory segment pointer, and build a scope where JSON/XML will be created
I    d json_SegmentSelectNo...
I    d                 pr              *   extproc(*CWIDEN :
     d                                     'jx_SegmentSelectNo')
     d  SegmentIndex                 10i 0 value

      //  Delete the segment and all JSON/XML nodes build while segment scope was active
I    d json_SegmentDispose...
I    d                 pr                  extproc(*CWIDEN :
     d                                     'jx_SegmentDispose')
     d  segmentPtr                     *   value

      // Maintain at list of index numbers to database CLOB/BLOB fields since pointers can not be shared in SQL
I    d json_mapIx...
I    d                 pr              N   extproc(*CWIDEN:'jx_MapIx' )         Returns *ON if found
I    d  ppNode                         *                                        pointer to node pointer
I    d  Index                        10u 0 value                                index of pointer

      * --------------------------------------------------------------------------------------------------------------
      * SQL interface:
      * Note: When SQL functions returns *NULL, then use  the json_Message() to retrive the message
      * --------------------------------------------------------------------------------------------------------------

      // If options need - then it has to be first call made.
      // NOTE: If a pConnection pointer is provided, it will be updated with the conection
I    d json_sqlSetOptions...
I    d                 pr                  extproc(*CWIDEN:
     d                                     'jx_sqlSetOptions')
I    d  parms                          *   value options(*string:*nopass)       json object with options ( see sample)

      // returns a object node with one resulting row for the SQL statment
I    d json_sqlResultRow...
I    d                 pr              *   extproc(*CWIDEN:                     Returns one SQL row as jx Obejct
     d                                     'jx_sqlResultRow')
I    d  sqlStmt                        *   value options(*string)               SQL statement to run
I    d  parms                          *   value options(*string:*nopass)       json object template

      // returns an array (or object with array) of resulting rows for the SQL statment
I    d json_sqlResultSet...
I    d                 pr              *   extproc(*CWIDEN:                     Returns SQL rows as jx Obejct
     d                                     'jx_sqlResultSet')
I    d  sqlStmt                        *   value options(*string)               SQL statement to run
I    d  start                        10i 0 value options(*nopass)               From row; 1=First
I    d  limit                        10i 0 value options(*nopass)               max number of rows; -1=all
     d     json_ALLROWS...
     d                 c                   const(-1)
I    d  format                       10i 0 value options(*nopass)               resultset format: Add following:
     d     json_ROWARRAY...                                                       + An array with each row as an object
     d                 c                   const(0)
     d     json_META...                                                           + Metaobject: rows, fields
     d                 c                   const(1)
     d     json_FIELDS...                                                         + Columns info
     d                 c                   const(2)
     d     json_TOTALROWS...                                                      + Count all rows in the resultset
     d                 c                   const(4)                                             ( Pricy so awoid it !! )
     d     json_UPPERCASE...                                                      + Uppercase column names
     d                 c                   const(8)
I    d  parms                          *   value options(*string:*nopass)       json object template

      // SQL cursor processing
I    d json_sqlOpen...
I    d                 pr              *   extproc(*CWIDEN:'jx_sqlOpen'  )      Returns handle to sql statement
I    d   sqlStmt                       *   value options(*string)               SQL statement to run
I    d   parms                         *   value options(*string:*nopass)       json object template

      // Fetch next from from that open sql handle, starting from rowNumer. 1=First row
I    d json_sqlFetchRelative...
I    d                 pr              *   extproc(*CWIDEN:                     Returns a row object (or *NULL if EOF)
     d                                     'jx_sqlFetchRelative')
I    d   pSqlHndl                      *   value                                sql statement handle ( from sqlOpen)
I    d   fromRow                     10i 0 value                                row from where to start 1=First

      // Fetch next from from that open sql handle
I    d json_sqlFetchNext...
I    d                 pr              *   extproc(*CWIDEN:'jx_sqlFetchNext')   Returns a row object (or *NULL if EOF)
I    d   pSqlHndl                      *   value                                sql statement handle ( from sqlOpen)

      // Number of columns in result set ( -1 if error)
I    d json_sqlColumns...
I    d                 pr            10i 0 extproc(*CWIDEN:'jx_sqlColumns')     Returns number of columns
I    d   pSqlHndl                      *   value                                sql statement handle ( from sqlOpen)

      // Number of rows  in result set ( -1 if error)
      // Note: This will run a hidden "select count(*)" which might be a little pricy
I    d json_sqlRows...
I    d                 pr            10i 0 extproc(*CWIDEN:'jx_sqlRows')        Returns number of rows
I    d   pSqlHndl                      *   value                                sql statement handle ( from sqlOpen)

      // Always colse the cursor after use, to release resources
I    d json_sqlClose...
I    d                 pr                  extproc(*CWIDEN:'jx_sqlClose')
I    d   pSqlHndl                      *                                        sql statement handle ( from sqlOpen)

      // Execute any SQL statement not involving a cursor
I    d json_sqlExec...
I    d                 pr              N   extproc(*CWIDEN:'jx_sqlExec'  )      Returns *ON if error
I    d   sqlStmt                       *   value options(*string)               SQL statement to run (template)
I    d   parms                         *   value options(*string:*nopass)       json object template data

      // Execute an update table where the row is defined as a json object
I    d json_sqlUpdate...
I    d                 pr              N   extproc(*CWIDEN:'jx_sqlUpdate')      Returns *ON if error
I    d   table                         *   value options(*string)               table name
I    d   row                           *   value options(*string)               json object: {a:123,b:"value"}
I    d   where                         *   value options(*string:*nopass)       where clause : 'where myKey=$key'
I    d   whereParms                    *   value options(*string:*nopass)       where parameters: { key:777}

I    d json_sqlInsert...
I    d                 pr              N   extproc(*CWIDEN:'jx_sqlInsert')      Returns *ON if error
I    d   table                         *   value options(*string)               table name
I    d   row                           *   value options(*string)               json object: {a:123,b:"value"}
I    d   parms                         *   value options(*string:*nopass)       extra parms

I    d json_sqlUpsert...
I    d                 pr              N   extproc(*CWIDEN:'jx_sqlUpsert')      Returns *ON if error
I    d   table                         *   value options(*string)               table name
I    d   row                           *   value options(*string)               json object: {a:123,b:"value"}
I    d   where                         *   value options(*string:*nopass)       where clause : 'where myKey=$key'
I    d   whereParms                    *   value options(*string:*nopass)       where parameters: { key:777}

I    d json_sqlGetInsertId...
I    d                 pr            10i 0 extproc(*CWIDEN:'jx_sqlGetInsertId') Returns id of last insert

I    d json_sqlGetMeta...
I    d                 pr              *   extproc(*CWIDEN:'jx_sqlGetMeta')     Returns array of column info
     d   sqlstmt                       *   value options(*string)

      // Return pointer to database connection. No options => will be default local database
I    d json_sqlConnect...
I    d                 pr              *   extproc(*CWIDEN:
     d                                     'jx_sqlConnect')
I    d   parms                         *   value options(*string:*nopass)       json object or string with options

      // Return pointer to database connection. No options => will be default local database
I    d json_sqlDisconnect...
I    d                 pr                  extproc(*CWIDEN:
     d                                     'jx_sqlDisconnect')

      // Return sql code for previous statement
I    d json_sqlCode...
I    d                 pr            10i 0 extproc(*CWIDEN:
     d                                     'jx_sqlCode')

      // --------------------------------------------------------------------------------------------------------------
      // Depricated and renamed functions :
      // --------------------------------------------------------------------------------------------------------------
      // Depricated - use  json_GetValueStr
I    d json_GetValue...
I    d                 pr         32767    varying
I    d                                     extproc(*CWIDEN :                    Returns node value
I    d                                     'jx_GetValueVC')
I    d   pNode                         *   value                                Pointer to node
I    d   Expression                    *   value options(*string:*nopass)       If not found - default value
I    d   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

      // Depricated - use  json_NodeCopy
     d json_Copy...
     d                 pr
     d                                     extproc(*CWIDEN :                    Appends a child element from anoth. tree
     d                                     'jx_NodeCopy')
     d   pRootNode                     *   value                                element. Retrive from Locate()
     d   pNewChild                     *   value                                element. Retrive from Locate()
     d   RefLocation                 10I 0 value                                Reference location to where it arrive

     d json_ElementCopy...
     d                 pr
     d                                     extproc(*CWIDEN :                    Appends a child element from anoth. tree
     d                                     'jx_NodeCopy')
     d   pRootNode                     *   value                                element. Retrive from Locate()
     d   pNewChild                     *   value                                element. Retrive from Locate()
     d   RefLocation                 10I 0 value                                Reference location to where it arrive

      // Depricated - use  json_NodeDelete
     d json_Delete...
     d                 pr
     d                                     extproc(*CWIDEN :                    Appends a child element from anoth. tree
     d                                     'jx_NodeDelete')
     d   pRootNode                     *   value                                element. Retrive from Locate()

      // Depricated - use  json_NodeDelete
     d json_ElementDelete...
     d                 pr
     d                                     extproc(*CWIDEN :                    Appends a child element from anoth. tree
     d                                     'jx_NodeDelete')
     d   pRootNode                     *   value                                element. Retrive from Locate()

      // Depricated - use  json_AsJsonText
     d json_AsText...
     d                 pr         32767    varying
     d                                     extproc(*CWIDEN : 'jx_AsJsonText')
     d   pNode                         *   value                                element. Retrive from Locate()


      // json_XpathValue   is depricated and replaced by: json_GetStr
     d json_XpathValue...
     d                 pr         32767    varying
     d                                     extproc(*CWIDEN : 'jx_GetValueVC')   Returns element or attribute value
     d   pNode                         *   value                                Pointer to tree
     d   Expression                    *   value options(*string)               Locations expression to node
     d   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

      // json_XpathValueNum   is depricated and replaced by: json_GetNum
     d json_XpathValueNum...
     d                 pr            30p15
     d                                     extproc(*CWIDEN : 'jx_GetValueNum')  Returns element or attribute using Xpath
     d   pJsonCom                      *   value                                Pointer to tree
     d   Node                          *   value options(*string)               X-path locations to node or attributes
     d   Defaultvalue                30p15 value options(*nopass)               If not found - default value

      // Use - json_NodeType
     d json_ElementType...
I    d                 pr             5I 0
I    d                                     extproc(*CWIDEN :
     d                                     'jx_GetNodeType')
I    d   pNode                         *   value                                Pointer to tree to receive format

      // Use json_NodeAdd
     d json_ElementAdd...
     d                 pr              *                                        returns the new element
     d                                     extproc(*CWIDEN :                    Appends a child element from anoth. tree
     d                                     'jx_NodeAdd')
     d   pRootNode                     *   value                                element. Retrive from Locate()
     d   RefLocation                 10I 0 value                                Reference location to where it arrive
I    d   Name                          *   value options(*string)               Name of element
I    d   Value                         *   value options(*string)               Value of element

      // Use json_GetNext
I    d json_GetElemNext...
I    d                 pr              *   extproc(*CWIDEN : 'jx_GetNodeNext')  Returns pointer to next sibling (elem)
I    d   pElem                         *   value                                Pointer to current element (elem)
     d
     d

      // use json_GetChild
I    d json_GetElemChild...
I    d                 pr              *   extproc(*CWIDEN : 'jx_GetNodeChild') Returns pointer to next child (elem)
I    d   pElem                         *   value                                Pointer to current element (elem)


      // use get json_GetName
     d json_getElemName...
I    d                 pr         32767    varying
I    d                                     extproc(*CWIDEN :
I    d                                     'jx_GetNodeNameVC')                  Returns node Name
I    d   pNode                         *   value                                Pointer to node

      // use xml_GetValueStr
I    d json_GetElemValue...
I    d                 pr         32767    varying
     d                                     extproc(*CWIDEN :                    Returns node value
I    d                                     'jx_GetNodeValueVC')
I    d   pElem                         *   value                                Pointer to element
I    d   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

       // use json_GetAttrValue
I    d json_GetAttr...
I    d                 pr         32767    varying
I    d                                     extproc(*CWIDEN :
I    d                                     'jx_GetNodeAttrValueVC')             Returns Attribute value
I    d   pNode                         *   value                                Pointer to element
I    d   AttrName                      *   value options(*string)               Attribute Name
I    d   Defaultvalue                  *   value options(*string:*nopass)       If not found - default value

      // has no effect any longer
     D json_setCcsid...
     D                 pr                  extproc(*CWIDEN : 'jx_SetCcsid')     Set input and output CCSID
I    D   inputCCSID                  10I 0 value                                Ccsid of inpur file
I    D   outputCCSID                 10I 0 value                                Ccsid of output file

      // depricated - use setNum
     d json_SetDec...
     d                 pr              *
     d                                     extproc(*CWIDEN:                     Returns node or attribute using Xpath
     d                                     'jx_SetDecByName')
     d   pNode                         *   value                                Pointer to json_ tree
     d   Expresion                     *   value options(*string)               X-path locations to node or attributes
     d   Value                       30p15 value                                New value to set / pointer to object

      // Depricated in both JSON and XML - use  json_WriteJsonStmf /   json_WriteXmlStmf
      /if not defined(JSONXML_DEPRICATED)
      /define  JSONXML_DEPRICATED
I    d json_WriteStmf...
I    d                 pr                  extproc(*CWIDEN :
I    d                                     'jx_WriteJsonStmf')
I    d   pNode                         *   value                                element. Retrive from Locate()
I    d   FileName                      *   value options(*string)               Name of output stream file
I    d   Ccsid                       10I 0 value                                Ccsid of output file
     d   Trim                          N   value options(*nopass)

I    d xml_WriteStmf...
I    d                 pr                  extproc(*CWIDEN :
I    d                                     'jx_WriteXmlStmf')
I    d   pNode                         *   value                                element. Retrive from Locate()
I    d   FileName                      *   value options(*string)               Name of output stream file
I    d   Ccsid                       10I 0 value                                Ccsid of output file
     d   Trim                          N   value options(*nopass)
      /endif

